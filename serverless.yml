service: emailcollect

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-jest-plugin

custom:
  jest:
    notify: true
    collectCoverage: true
  tableName: 'emails-table-$(self:provider.stage)'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
      Resource:
        - { "Fn::GetAtt": ["EmailTable", "Arn"] }
  environment:
    USERS_TABLE: $(self:custom.tableName)

functions:
  health:
    handler: lambda/index.handler
    events:
      - http: 'GET /health'
  postUser:
    handler: lambda/index.handler
    events:
      - http: 'POST /emails'

resources:
  Resources:
    EmailTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: emails
        AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: site
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: site
          KeyType: RANGE
        GlobalSecondaryIndexes:
        - IndexName: by-site
          KeySchema:
          - AttributeName: site
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
